<?php

namespace App\Http\Controllers;

use App\Models\Campaign;
use App\Models\Lesson;
use App\Models\Report;
use App\Models\Survey;
use App\Models\SurveyAnswer;
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;

class DashboardController extends Controller
{
    public function admin()
    {
        $users = User::count();
        $campaigns = Campaign::count();
        $surveys  = Survey::count();
        $reports  = Report::count();
        $surveysAnswers = SurveyAnswer::count();
        $campaignReach = User::count();
        $activeUsers = User::count();

        //count community
        $communityUser = User::where('role', 'Community')->count();

        // Report statistics
        $totalReports = Report::count();
        $activeReports = Report::where('still_going', true)->count();
        $reportsByCategory = Report::select('type_abuse', DB::raw('count(*) as count'))
            ->groupBy('type_abuse')
            ->get();
        $reportsByProvince = Report::select('province', DB::raw('count(*) as count'))
            ->groupBy('province')
            ->get();
        $recentReports = Report::where('created_at', '>=', now()->subDays(7))->count(); // Reports in the last 7 days

        $reportsOverTime = Report::select(
            DB::raw('DATE(created_at) as date'),
            DB::raw('count(*) as count')
        )
            ->where('created_at', '>=', now()->subDays(30))
            ->groupBy(DB::raw('DATE(created_at)'))
            ->orderBy(DB::raw('DATE(created_at)'), 'asc')
            ->pluck('count', 'date');

            // Monthly reports grouped by status (Pending, Viewed, Resolved)
        $monthlyReports = Report::select(
            DB::raw('DATE_FORMAT(created_at, "%Y-%m") as month'),
            DB::raw('SUM(status = "pending") as pending'),
            DB::raw('SUM(status = "viewed") as viewed'),
            DB::raw('SUM(status = "resolved") as resolved')
        )

            ->groupBy(DB::raw('DATE_FORMAT(created_at, "%Y-%m")'))
            ->orderBy(DB::raw('DATE_FORMAT(created_at, "%Y-%m")'), 'asc')
            ->get()
            ->keyBy('month')
            ->toArray(); // Ensure it is converted to an array

        return view('admin.dashboard', compact(
            'users',
            'campaigns',
            'surveys',
            'surveysAnswers',
            'campaignReach',
            'reports',
            'activeUsers',
            'totalReports',
            'activeReports',
            'reportsByCategory',
            'reportsByProvince',
            'recentReports',
            'reportsOverTime',
            'monthlyReports', // Pass this variable to the view
            'communityUser'  // pass number of community
        ));
    }


    public function child()
    {
        // $reportData = [
        //     'sessions' => User::count(),
        //     'modules_completed' => Lesson::count(),
        //     'reports_generated' => Report::where('user_id', Auth::id())->count(),
        // ];
        // return view('child.dashboard', compact('reportData'));
        // Retrieve child-specific report data
       
        $childName = Auth::user()->first_name;

        $reportData = [
            'sessions' => User::where('role', 'child')->count(), // Count sessions for children
            // 'modules_completed' => Lesson::whereHas('users', function ($query) {
            //     $query->where('role', 'child')->where('id', Auth::id());
            // })->count(), // Modules completed by the logged-in child
            'modules_completed' => Lesson::count(),
            'reports_generated' => Report::where('user_id', Auth::id())->count(), // Reports by the child
        ];

        // Additional data: activity over time for visualization
        $activityOverTime = Report::select(
            DB::raw('DATE(created_at) as date'),
            DB::raw('count(*) as count')
        )
            ->where('user_id', Auth::id()) // Only reports generated by the logged-in child
            ->groupBy(DB::raw('DATE(created_at)'))
            ->orderBy(DB::raw('DATE(created_at)'), 'asc')
            ->pluck('count', 'date'); // Pluck counts by date

        $files = Storage::disk('public')->files('child_resources');

        $pdfFiles = collect($files)->filter(function ($file) {
            return strtolower(pathinfo($file, PATHINFO_EXTENSION)) === 'pdf';
        });

        // Return the data to the child's dashboard view
        return view('child.dashboard', compact('childName', 'reportData', 'activityOverTime', 'pdfFiles'));
    }

    public function community()
    {
        $communitydName = Auth::user()->first_name;
        $reportData = [
            'total_surveys' => Survey::count(),
            'answered_surveys' => SurveyAnswer::where('user_id', Auth::id())->count(),
            'active_users' => User::count(),
            'e_learning_modules' => Lesson::count(),
            'total_cases' => Report::where('user_id', Auth::id())->count(),
        ];
        $files = Storage::disk('public')->files('community_resources');

        $pdfFiles = collect($files)->filter(function ($file) {
            return strtolower(pathinfo($file, PATHINFO_EXTENSION)) === 'pdf';
        });

        return view('community.dashboard', compact('reportData', 'pdfFiles', 'communitydName'));
    }

    public function landingPageResources()
    {
        $files = Storage::disk('public')->files('resources');

        $pdfFiles = collect($files)->filter(function ($file) {
            return strtolower(pathinfo($file, PATHINFO_EXTENSION)) === 'pdf';
        });

        return view('resources', ['pdfFiles' => $pdfFiles]);
    }

}
